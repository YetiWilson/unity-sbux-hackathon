# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class StorageObject(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, serial_number: str=None, ip_address: str=None, model: str=None, vendor: str=None, install_date: str=None, maintenance_contract_end_date: str=None, location: str=None, environment: str=None, status: str=None, tier: str=None):
        """
        StorageObject - a model defined in Swagger

        :param serial_number: The serial_number of this StorageObject.
        :type serial_number: str
        :param ip_address: The ip_address of this StorageObject.
        :type ip_address: str
        :param model: The model of this StorageObject.
        :type model: str
        :param vendor: The vendor of this StorageObject.
        :type vendor: str
        :param install_date: The install_date of this StorageObject.
        :type install_date: str
        :param maintenance_contract_end_date: The maintenance_contract_end_date of this StorageObject.
        :type maintenance_contract_end_date: str
        :param location: The location of this StorageObject.
        :type location: str
        :param environment: The environment of this StorageObject.
        :type environment: str
        :param status: The status of this StorageObject.
        :type status: str
        :param tier: The tier of this StorageObject.
        :type tier: str
        """
        self.swagger_types = {
            'serial_number': str,
            'ip_address': str,
            'model': str,
            'vendor': str,
            'install_date': str,
            'maintenance_contract_end_date': str,
            'location': str,
            'environment': str,
            'status': str,
            'tier': str
        }

        self.attribute_map = {
            'serial_number': 'serialNumber',
            'ip_address': 'ipAddress',
            'model': 'model',
            'vendor': 'vendor',
            'install_date': 'installDate',
            'maintenance_contract_end_date': 'maintenanceContractEndDate',
            'location': 'location',
            'environment': 'environment',
            'status': 'status',
            'tier': 'tier'
        }

        self._serial_number = serial_number
        self._ip_address = ip_address
        self._model = model
        self._vendor = vendor
        self._install_date = install_date
        self._maintenance_contract_end_date = maintenance_contract_end_date
        self._location = location
        self._environment = environment
        self._status = status
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt) -> 'StorageObject':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StorageObject of this StorageObject.
        :rtype: StorageObject
        """
        return deserialize_model(dikt, cls)

    @property
    def serial_number(self) -> str:
        """
        Gets the serial_number of this StorageObject.

        :return: The serial_number of this StorageObject.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: str):
        """
        Sets the serial_number of this StorageObject.

        :param serial_number: The serial_number of this StorageObject.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def ip_address(self) -> str:
        """
        Gets the ip_address of this StorageObject.

        :return: The ip_address of this StorageObject.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """
        Sets the ip_address of this StorageObject.

        :param ip_address: The ip_address of this StorageObject.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def model(self) -> str:
        """
        Gets the model of this StorageObject.

        :return: The model of this StorageObject.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """
        Sets the model of this StorageObject.

        :param model: The model of this StorageObject.
        :type model: str
        """

        self._model = model

    @property
    def vendor(self) -> str:
        """
        Gets the vendor of this StorageObject.

        :return: The vendor of this StorageObject.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor: str):
        """
        Sets the vendor of this StorageObject.

        :param vendor: The vendor of this StorageObject.
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def install_date(self) -> str:
        """
        Gets the install_date of this StorageObject.

        :return: The install_date of this StorageObject.
        :rtype: str
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date: str):
        """
        Sets the install_date of this StorageObject.

        :param install_date: The install_date of this StorageObject.
        :type install_date: str
        """

        self._install_date = install_date

    @property
    def maintenance_contract_end_date(self) -> str:
        """
        Gets the maintenance_contract_end_date of this StorageObject.

        :return: The maintenance_contract_end_date of this StorageObject.
        :rtype: str
        """
        return self._maintenance_contract_end_date

    @maintenance_contract_end_date.setter
    def maintenance_contract_end_date(self, maintenance_contract_end_date: str):
        """
        Sets the maintenance_contract_end_date of this StorageObject.

        :param maintenance_contract_end_date: The maintenance_contract_end_date of this StorageObject.
        :type maintenance_contract_end_date: str
        """

        self._maintenance_contract_end_date = maintenance_contract_end_date

    @property
    def location(self) -> str:
        """
        Gets the location of this StorageObject.

        :return: The location of this StorageObject.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """
        Sets the location of this StorageObject.

        :param location: The location of this StorageObject.
        :type location: str
        """

        self._location = location

    @property
    def environment(self) -> str:
        """
        Gets the environment of this StorageObject.

        :return: The environment of this StorageObject.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment: str):
        """
        Sets the environment of this StorageObject.

        :param environment: The environment of this StorageObject.
        :type environment: str
        """

        self._environment = environment

    @property
    def status(self) -> str:
        """
        Gets the status of this StorageObject.

        :return: The status of this StorageObject.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this StorageObject.

        :param status: The status of this StorageObject.
        :type status: str
        """

        self._status = status

    @property
    def tier(self) -> str:
        """
        Gets the tier of this StorageObject.

        :return: The tier of this StorageObject.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier: str):
        """
        Sets the tier of this StorageObject.

        :param tier: The tier of this StorageObject.
        :type tier: str
        """

        self._tier = tier

